/**
 * @remix-run/dev v1.17.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var fse = require('fs-extra');
var esbuild = require('esbuild');
var invariant = require('../../invariant.js');
var postcss = require('../utils/postcss.js');
var absoluteCssUrlsPlugin = require('./absoluteCssUrlsPlugin.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);
var fse__namespace = /*#__PURE__*/_interopNamespace(fse);
var esbuild__default = /*#__PURE__*/_interopDefaultLegacy(esbuild);

const isExtendedLengthPath = /^\\\\\?\\/;
function normalizePathSlashes(p) {
  return isExtendedLengthPath.test(p) ? p : p.replace(/\\/g, "/");
}

/**
 * This plugin loads css files with the "css" loader (bundles and moves assets to assets directory)
 * and exports the url of the css file as its default export.
 */
function cssFilePlugin({
  config,
  options,
  fileWatchCache
}) {
  return {
    name: "css-file",
    async setup(build) {
      let {
        absWorkingDir,
        assetNames,
        chunkNames,
        conditions,
        define,
        external,
        sourceRoot,
        treeShaking,
        tsconfig,
        format,
        loader,
        mainFields,
        nodePaths,
        platform,
        publicPath,
        target
      } = build.initialOptions;
      let postcssProcessor = await postcss.getPostcssProcessor({
        config
      });
      build.onLoad({
        filter: /\.css$/
      }, async args => {
        let {
          metafile,
          outputFiles,
          warnings,
          errors
        } = await esbuild__default["default"].build({
          absWorkingDir,
          assetNames,
          chunkNames,
          conditions,
          define,
          external,
          format,
          mainFields,
          nodePaths,
          platform,
          publicPath,
          sourceRoot,
          target,
          treeShaking,
          tsconfig,
          minify: options.mode === "production",
          bundle: true,
          minifySyntax: true,
          metafile: true,
          write: false,
          sourcemap: Boolean(options.sourcemap && postcssProcessor),
          // We only need source maps if we're processing the CSS with PostCSS
          splitting: false,
          outdir: config.assetsBuildDirectory,
          entryNames: assetNames,
          entryPoints: [args.path],
          loader: {
            ...loader,
            ".css": "css"
          },
          plugins: [absoluteCssUrlsPlugin.absoluteCssUrlsPlugin(), ...(postcssProcessor ? [postcssPlugin({
            fileWatchCache,
            postcssProcessor,
            options
          })] : [])]
        });
        if (errors && errors.length) {
          return {
            errors
          };
        }
        invariant["default"](metafile, "metafile is missing");
        let {
          outputs
        } = metafile;
        let entry = Object.keys(outputs).find(out => outputs[out].entryPoint);
        invariant["default"](entry, "entry point not found");
        let normalizedEntry = path__namespace.resolve(config.rootDirectory, normalizePathSlashes(entry));
        let entryFile = outputFiles.find(file => {
          return path__namespace.resolve(config.rootDirectory, normalizePathSlashes(file.path)) === normalizedEntry;
        });
        invariant["default"](entryFile, "entry file not found");
        let outputFilesWithoutEntry = outputFiles.filter(file => file !== entryFile);

        // write all assets
        await Promise.all(outputFilesWithoutEntry.map(({
          path: filepath,
          contents
        }) => fse__namespace.outputFile(filepath, contents)));
        return {
          contents: entryFile.contents,
          loader: "file",
          // add all css assets to watchFiles
          watchFiles: Object.values(outputs).reduce((arr, {
            inputs
          }) => {
            let resolvedInputs = Object.keys(inputs).map(input => {
              return path__namespace.resolve(input);
            });
            arr.push(...resolvedInputs);
            return arr;
          }, []),
          warnings
        };
      });
    }
  };
}
function postcssPlugin({
  fileWatchCache,
  postcssProcessor,
  options
}) {
  return {
    name: "postcss-plugin",
    async setup(build) {
      build.onLoad({
        filter: /\.css$/,
        namespace: "file"
      }, async args => {
        let cacheKey = `postcss-plugin?sourcemap=${options.sourcemap}&path=${args.path}`;
        let {
          cacheValue
        } = await fileWatchCache.getOrSet(cacheKey, async () => {
          let contents = await fse__namespace.readFile(args.path, "utf-8");
          let {
            css,
            messages
          } = await postcssProcessor.process(contents, {
            from: args.path,
            to: args.path,
            map: options.sourcemap
          });
          let fileDependencies = new Set();
          let globDependencies = new Set();

          // Ensure the CSS file being passed to PostCSS is tracked as a
          // dependency of this cache key since a change to this file should
          // invalidate the cache, not just its sub-dependencies.
          fileDependencies.add(args.path);

          // PostCSS plugin result objects can contain arbitrary messages returned
          // from plugins. Here we look for messages that indicate a dependency
          // on another file or glob. Here we target the generic dependency messages
          // returned from 'postcss-import' and 'tailwindcss' plugins, but we may
          // need to add more in the future depending on what other plugins do.
          // More info:
          // - https://postcss.org/api/#result
          // - https://postcss.org/api/#message
          for (let message of messages) {
            if (message.type === "dependency" && typeof message.file === "string") {
              fileDependencies.add(message.file);
              continue;
            }
            if (message.type === "dir-dependency" && typeof message.dir === "string" && typeof message.glob === "string") {
              globDependencies.add(path__namespace.join(message.dir, message.glob));
              continue;
            }
          }
          return {
            cacheValue: css,
            fileDependencies,
            globDependencies
          };
        });
        return {
          contents: cacheValue,
          loader: "css"
        };
      });
    }
  };
}

exports.cssFilePlugin = cssFilePlugin;
