"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const https_1 = __importDefault(require("https"));
const http_1 = __importDefault(require("http"));
const net_1 = __importDefault(require("net"));
const protocol = (server) => {
    if (server instanceof http_1.default.Server)
        return 'http';
    if (server instanceof https_1.default.Server)
        return 'https';
    if (server instanceof net_1.default.Server)
        return 'tcp';
};
function listen(server, ...args) {
    return __awaiter(this, void 0, void 0, function* () {
        server.listen(...args);
        yield (0, events_1.once)(server, "listening");
        const addressInfo = server.address();
        if (typeof addressInfo === 'string' || addressInfo === null)
            return addressInfo;
        const { address, port, family } = addressInfo;
        const hostname = family === 'IPv6' ? `[${address}]` : address;
        return new URL(`${protocol(server)}://${hostname}:${port}/`);
    });
}
exports.default = listen;
